package com.igo.controller.customer;

import com.igo.IGoApplication;
import com.igo.controller.admin.PaymentController;
import com.igo.models.tvm.TVM;
import com.igo.models.fares.Cost;
import com.igo.models.localization.Language;
import com.igo.models.ticket.Ticket;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;

import java.io.IOException;
import java.util.Observable;
import java.util.Observer;
import java.util.Optional;

/**
 * @author mkjodhani
 * @project
 * @since 22/03/23
 */
public class PurchaseTicketController implements Observer {
    public Label ticketDetails;
    public Label ticketType;
    public Label priceLabel;
    public Button purchaseTicketButton;
    @FXML
    ComboBox<Cost.PERIOD> ticketTypeComboBox;
    @FXML
    TextField price;
    Button closeParentButton = new Button();
    public void initialize(){
        Language.getReference().addObserver(this);
        updateLabels();
        ticketTypeComboBox.getItems().add(Cost.PERIOD.ONE_TRIP);
        ticketTypeComboBox.getItems().add(Cost.PERIOD.TWO_TRIPS);
        ticketTypeComboBox.getItems().add(Cost.PERIOD.ONE_DAY);
        ticketTypeComboBox.getItems().add(Cost.PERIOD.THREE_DAYS);
        ticketTypeComboBox.getItems().add(Cost.PERIOD.UN_LIMITED_WEEKEND);
        ticketTypeComboBox.getItems().add(Cost.PERIOD.GROUP);
    }
    public void purchaseTicket(ActionEvent actionEvent) throws IOException {
        Cost.PERIOD ticketType = ticketTypeComboBox.getValue();
        if (ticketType == null){
            IGoApplication.showErrorDialogBox("Please provide valid information!","Ticket type is incorrect.");
            return;
        }
        String paymentOptions[] = { "Cash","Cash less" };
        ChoiceDialog d = new ChoiceDialog(paymentOptions[0], paymentOptions);
        d.setHeaderText("Payment Method");
        d.setHeaderText("Select one of the payment method");
        Optional<String> result = d.showAndWait();
        if ( result.isPresent() )
        {
            if(d.getSelectedItem().equals("Cash")){
                Ticket ticket = Ticket.generateTicketByCash("H3W",ticketType);
                closeParentButton.fire();
                IGoApplication.showDialogBox("Success!","Ticket has been generated successfully!","You can refer the generated by #"+ticket.getTicketId()+".");
                TVM.getReference().notifyAllObservers();
            }
            else {
                Stage stage = new Stage();
                FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/com/igo/admin/payment.fxml"));
                Scene scene = new Scene(fxmlLoader.load(), IGoApplication.getWidth(), IGoApplication.getHeight());
                PaymentController paymentController = fxmlLoader.getController();
                paymentController.setPaymentFor(Cost.TYPES.TICKET);
                paymentController.setPeriod(ticketType);
                paymentController.getCloseParentButton().setOnAction(e ->{
                    closeParentButton.fire();
                    stage.close();
                });
                stage.setTitle("Payment");
                stage.setScene(scene);
                stage.setResizable(false);
                stage.show();
            }
        }
    }
    public void fetch(ActionEvent actionEvent) {
        Cost.PERIOD ticketType = ticketTypeComboBox.getValue();
        if (ticketType == null){
            return;
        }
        double priceValue =  Cost.getTicketPriceByTimePeriod(ticketType);
        price.setText(String.valueOf(priceValue));
    }

    public Button getCloseParentButton() {
        return closeParentButton;
    }

    private void updateLabels(){
        priceLabel.setText(Language.getReference().getLabel("price"));
        ticketType.setText(Language.getReference().getLabel("ticketType"));
        ticketDetails.setText(Language.getReference().getLabel("ticketDetails"));
        purchaseTicketButton.setText(Language.getReference().getLabel("purchaseTicket"));
    }
    @Override
    public void update(Observable o, Object arg) {
        updateLabels();
    }
}
